server.port=8081
server.servlet.context-path=/userservice
spring.datasource.url=jdbc:mysql://localhost:3306/microuserservice
spring.datasource.name=testds 
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
#eureka conf
#eureka.client.fetch-registry=true
#eureka.instance.prefer-ip-address=true
#eureka.client.register-with-eureka=true
#above value is by default true only
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka
#name in eureka server
spring.application.name=USER-SERVICE
#telling to fetch the properties from config server git 
spring.config.import= configserver:http://localhost:8085
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always
#using fault tolerance : implementing circuit breaker using resilience 4j
#registers the health indicator for given method : ratingHotelBreaker in usercontroller class
resilience4j.circuitbreaker.instances.ratingHotelFallbackCircuitBreaker.register-health-indicator=true
#
resilience4j.circuitbreaker.instances.ratingHotelFallbackCircuitBreaker.event-consumer-buffer-size=10
#what should be the failure rate in % so that the circuitbreaker transitions to open	
resilience4j.circuitbreaker.instances.ratingHotelFallbackCircuitBreaker.failure-rate-threshold=50
#before circuit breaker can turn to open state, the minimum number of calls to the service to calculate the error rate
resilience4j.circuitbreaker.instances.ratingHotelFallbackCircuitBreaker.minimum-number-of-calls=5
#circuit breaker will automatically transition from open to half open state, no need to explicitly mention that
resilience4j.circuitbreaker.instances.ratingHotelFallbackCircuitBreaker.automatic-transition-from-open-to-half-open-enabled=true
#the time circuitbreaker should wait before transitioning from open to half open and try again to connect to down service
resilience4j.circuitbreaker.instances.ratingHotelFallbackCircuitBreaker.wait-duration-in-open-state=6s
#no of calls sent out in half open state to check if the service is responding back
resilience4j.circuitbreaker.instances.ratingHotelFallbackCircuitBreaker.permitted-number-of-calls-in-half-open-state=3
#if count based then no of calls that are recorded or if timme based then no of seconds
resilience4j.circuitbreaker.instances.ratingHotelFallbackCircuitBreaker.sliding-window-size=10
#sliding window can be of count based or time based, it defines the way in which the calls are recorded to check the outcome
resilience4j.circuitbreaker.instances.ratingHotelFallbackCircuitBreaker.sliding-window-type=COUNT_BASED
#implementing the retry module for retrying to connect to a service in case it doesnt respond back on time at first
resilience4j.retry.instances.ratingHotelFallbackCircuitBreaker.max-attempts=3
resilience4j.retry.instances.ratingHotelFallbackCircuitBreaker.wait-duration=3
#implementing rate limiter
resilience4j.ratelimiter.instances.userRateLimiter.limit-for-period=2
resilience4j.ratelimiter.instances.userRateLimiter.limit-refresh-period=4s
resilience4j.ratelimiter.instances.userRateLimiter.timeout-duration=0s
#configuring okta 
okta.oauth2.issuer=https://dev-82715208.okta.com/oauth2/default
okta.oauth2.audience=api://default
#spring security
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://dev-82715208.okta.com/oauth2/default
spring.security.oauth2.client.registration.my-internal-client.provider=okta
spring.security.oauth2.client.registration.my-internal-client.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.my-internal-client.scope=internal
spring.security.oauth2.client.registration.my-internal-client.client-id=0oaa71lqltzZZMLXN5d7
spring.security.oauth2.client.registration.my-internal-client.client-secret=PYSzkFWT96hkAvlXDEzyOxpmhL2Bey5ORBfrNRrf
spring.security.oauth2.client.provider.okta.issuer-uri=https://dev-82715208.okta.com/oauth2/default
